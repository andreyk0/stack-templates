{-# START_FILE .gitignore #-}
/{{name}}.cabal
/.sources
/.stack-work
/target

{-# START_FILE Makefile #-}
TARGET=target
EXE=$(TARGET)/{{name}}
DIST_EXE=$(EXE)-$(shell uname -s)-$(shell uname -m)
DIST_EXE_SIG=$(DIST_EXE).sig

build:
	stack build $(STACK_OPTS) {{name}}
	hlint src

build-prof:
	stack build $(STACK_OPTS) --profile --ghc-options="-rtsopts -fprof-auto" {{name}}

install:
	stack install $(STACK_OPTS) {{name}}

bindist:
	mkdir -p $(TARGET)
	stack --local-bin-path $(TARGET) install $(STACK_OPTS) {{name}}
	upx --best $(EXE)
	mv $(EXE) $(DIST_EXE)
	gpg --output $(DIST_EXE_SIG) --detach-sign $(DIST_EXE)

clean:
	stack clean
	rm -rf $(TARGET)

.PHONY: build build-prof clean

{-# START_FILE bin/{{name}} #-}
#!/bin/bash
exec stack exec {{name}} -- "$@"

{-# START_FILE package.yaml #-}
name: {{name}}
version: '0.1.0.0'
synopsis: Initial project template from stack
description: Please see README.md
category: {{category}}{{^category}}Web{{/category}}
author: {{author-name}}{{^author-name}}Author name here{{/author-name}}
maintainer: {{author-email}}{{^author-email}}example@example.com{{/author-email}}
copyright: {{copyright}}{{^copyright}}{{year}}{{^year}}2018{{/year}} {{author-name}}{{^author-name}}Author name here{{/author-name}}{{/copyright}}
license: BSD3
homepage: https://github.com/{{github-username}}{{^github-username}}githubuser{{/github-username}}/{{name}}#readme
ghc-options:
- -Wall
- -threaded
dependencies:
- base
- aeson
- bytestring
- conduit
- conduit-extra
- containers
- exceptions
- gitrev
- monad-control
- monad-logger
- monad-loops
- mtl
- optparse-applicative
- text
- transformers
- transformers-base
- utf8-string
executables:
  {{name}}:
    main: Main.hs
    source-dirs: src

{-# START_FILE Setup.hs #-}
import Distribution.Simple
main = defaultMain

{-# START_FILE src/Args.hs #-}
{-# LANGUAGE LambdaCase #-}

module Args
  (
    Args(..)
  , parseCliArgs
  ) where

import           Options.Applicative

data Custom = Custom1 | Custom2 deriving (Eq, Show, Ord)


data Args = Args { argsVerbose :: !Bool
                 , argsVersion :: !Bool
                 , argsUser :: !String
                 , argsHost :: !String
                 , argsCustom :: !Custom
                 } deriving (Show)


parseArgs :: Parser Args
parseArgs = Args
     <$> switch
         ( long "verbose"
        <> short 'v'
        <> help "Be verbose.")
     <*> switch
         ( long "version"
        <> short 'V'
        <> help "Print version and exit.")
     <*> strOption
         ( long "user"
        <> short 'u'
        <> help "App user" )
     <*> strOption
         ( long "host"
        <> short 'h'
        <> value "localhost"
        <> showDefault
        <> help "App host" )
     <*> option parseCustomArg
         ( long "custom-arg"
        <> short 'c'
        <> value Custom1
        <> showDefault
        <> help "Arg with a custom parser." )


parseCustomArg :: ReadM Custom
parseCustomArg = eitherReader $ \case
    "c1" -> Right Custom1
    "c2" -> Right Custom2
    x    -> Left $ "Failed to parse custom argument " <> x <> ", expected 'c1' or 'c2'"


parseCliArgs :: IO Args
parseCliArgs = execParser opts
  where
    opts = info (helper <*> parseArgs)
      ( fullDesc
     <> header "Add program header here."
     <> progDesc "Add program description here. Source: https://github.com/{{github-username}}{{^github-username}}githubuser{{/github-username}}/{{name}}")

{-# START_FILE src/App.hs #-}
{-# LANGUAGE BangPatterns               #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE OverloadedStrings          #-}
{-# LANGUAGE RecordWildCards            #-}
{-# LANGUAGE TemplateHaskell            #-}

module App
  (
    App
  , askUser
  , getArgs
  , isVerbose
  , runApp
  , tshow
  , withTerminalEcho
  ) where


import           Args
import           Control.Monad
import           Control.Monad.Catch
import           Control.Monad.IO.Class
import           Control.Monad.Logger
import           Control.Monad.Reader
import           Data.Text (Text)
import qualified Data.Text as T
import qualified Data.Text.IO as TIO
import           Development.GitRev
import           System.Exit
import           System.IO


data AppState = AppState { asArgs :: !Args
                           -- more state
                         }


newtype App a =
  App { unApp :: ReaderT AppState (LoggingT IO) a
      } deriving ( Applicative
                 , Functor
                 , Monad
                 , MonadCatch
                 , MonadIO
                 , MonadLogger
                 , MonadLoggerIO
                 , MonadReader AppState
                 , MonadThrow
                 )

isVerbose :: App Bool
isVerbose = fmap argsVerbose getArgs

getArgs :: App Args
getArgs = asks asArgs

tshow :: (Show a) => a -> Text
tshow = T.pack . show

-- | Control terminal echo, flush stdin, for user interaction
withTerminalEcho :: Bool -- ^ echo user input to terminal
                 -> IO a -- ^ IO action
                 -> IO a
withTerminalEcho echo action = do
  hFlush stdout
  old <- hGetEcho stdin
  bracket_ (hSetEcho stdin echo)
           (do hSetEcho stdin old ; hFlush stdout)
           action

-- | Prompt user for input
askUser :: (MonadIO m)
        => Text -- ^ user prompt
        -> m Text
askUser prompt = liftIO $ do
  TIO.putStr prompt
  hFlush stdout
  x <- TIO.getLine
  TIO.putStrLn ""
  hFlush stdout
  pure x


runApp :: App a
       -> IO a
runApp appA  = do
  args@Args{..} <- parseCliArgs

  when argsVersion $ die $ "Version: " <> $(gitBranch) <> "@" <> $(gitHash)

  let llf _ ll = argsVerbose || ll >= LevelInfo
  runStderrLoggingT $ filterLogger llf $ runReaderT (unApp appA) (AppState args)


{-# START_FILE src/Main.hs #-}
{-# LANGUAGE BangPatterns       #-}
{-# LANGUAGE RecordWildCards    #-}
{-# LANGUAGE TemplateHaskell    #-}


module Main where

import           App
import           Args
import           Control.Monad.IO.Class
import           Control.Monad.Logger


main:: IO ()
main = runApp $ do
  args@Args{..} <- getArgs
  liftIO $ print args
  $(logInfoSH) args

{-# START_FILE LICENSE #-}
Copyright {{author-name}}{{^author-name}}Author name here{{/author-name}} (c) {{year}}{{^year}}2016{{/year}}

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above
      copyright notice, this list of conditions and the following
      disclaimer in the documentation and/or other materials provided
      with the distribution.

    * Neither the name of {{author-name}}{{^author-name}}Author name here{{/author-name}} nor the names of other
      contributors may be used to endorse or promote products derived
      from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
